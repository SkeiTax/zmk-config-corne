/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE     &kp Q            &kp W            &kp E              &kp R         &kp T        &kp Y      &kp U         &kp I          &kp O        &kp P                &kp LEFT_BRACKET
&mt LCTRL TAB  &hrm LEFT_GUI A  &hrm LEFT_ALT S  &hrm LEFT_SHIFT D  &hrm LCTRL F  &kp G        &kp H      &hrm RCTRL J  &hrm RSHFT K   &hrm RALT L  &hrm RGUI SEMICOLON  &kp SQT
&kp LSHFT      &kp Z            &kp X            &kp C              &kp V         &kp B        &kp N      &kp M         &kp COMMA      &kp DOT      &kp FSLH             &kp RG(SPACE)
                                                 &kp LALT           &mo 2         &kp SPACE    &kp ENTER  &mo 3         &kp BACKSPACE
            >;
        };

        game_layer {
            bindings = <
&mt TAB ESCAPE  &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y      &kp U  &kp I          &kp O    &kp P     &kp LEFT_BRACKET
&kp LCTRL       &kp A  &kp S  &kp D     &kp F  &kp G        &kp H      &kp J  &kp K          &kp L    &kp SEMI  &kp SQT
&kp LSHFT       &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N      &kp M  &kp COMMA      &kp DOT  &kp FSLH  &kp RG(SPACE)
                              &kp LALT  &mo 2  &kp SPACE    &kp ENTER  &mo 3  &kp BACKSPACE
            >;
        };

        additional_symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp N1             &kp N2       &kp N3        &kp N4        &kp N5          &kp LESS_THAN         &kp GT                 &kp AMPS    &kp PIPE   &kp STAR       &kp BACKSLASH
&trans     &mt LGUI NUMBER_6  &mt LALT N7  &mt LSHFT N8  &mt LCTRL N9  &kp NUMBER_0    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS    &kp MINUS  &kp SEMICOLON  &kp SINGLE_QUOTE
&trans     &kp EXCLAMATION    &kp AT_SIGN  &kp HASH      &kp DOLLAR    &kp PERCENT     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EQUAL   &kp UNDER  &kp SLASH      &kp CARET
                                           &trans        &trans        &trans          &trans                &mo 4                  &kp DELETE
            >;
        };

        media_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&tog 1      &kp F1       &kp F2       &kp F3        &kp F4        &kp LA(LC(T))    &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &kp C_STOP        &kp C_VOLUME_UP
&caps_word  &mt LGUI F5  &mt LALT F6  &mt LSHFT F7  &mt LCTRL F8  &kp LS(LG(S))    &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &kp C_PLAY_PAUSE  &kp K_MUTE
&trans      &kp F9       &kp F10      &kp F11       &kp F12       &kp LA(SPACE)    &kp LC(Z)     &kp LC(C)     &kp LC(V)   &kp LC(Y)      &kp LC(X)         &kp C_VOLUME_DOWN
                                      &trans        &mo 4         &trans           &trans        &trans        &trans
            >;
        };

        BLT {
            bindings = <
&none       &none         &none         &none         &trans        &none           &none   &none   &none   &none   &none  &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none   &none   &trans  &none  &bt BT_CLR_ALL
&none       &none         &none         &none         &none         &none           &none   &none   &none   &none   &none  &none
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
